[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pygame,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.",
        "description": "pygame.",
        "detail": "pygame.",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "button",
        "description": "button",
        "isExtraImport": true,
        "detail": "button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "button",
        "description": "button",
        "isExtraImport": true,
        "detail": "button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "button",
        "description": "button",
        "isExtraImport": true,
        "detail": "button",
        "documentation": {}
    },
    {
        "label": "checkers",
        "importPath": "checkers",
        "description": "checkers",
        "isExtraImport": true,
        "detail": "checkers",
        "documentation": {}
    },
    {
        "label": "checkers",
        "importPath": "checkers",
        "description": "checkers",
        "isExtraImport": true,
        "detail": "checkers",
        "documentation": {}
    },
    {
        "label": "tic_tac_toe",
        "importPath": "tic_tac_toe",
        "description": "tic_tac_toe",
        "isExtraImport": true,
        "detail": "tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "player_stats",
        "importPath": "player_stats",
        "description": "player_stats",
        "isExtraImport": true,
        "detail": "player_stats",
        "documentation": {}
    },
    {
        "label": "connect_4",
        "importPath": "connect_four",
        "description": "connect_four",
        "isExtraImport": true,
        "detail": "connect_four",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "Selected.button",
        "description": "Selected.button",
        "peekOfCode": "class Button():\n\tdef __init__(self, pos, input, font, base, hover):\n\t\tself.x = pos[0]\n\t\tself.y = pos[1]\n\t\tself.font = font\n\t\tself.base, self.hover = base, hover\n\t\tself.input = input\n\t\tself.text = self.font.render(self.input, True, self.base)\n\t\tself.rect = self.text.get_rect(center=(self.x, self.y))\n\tdef update(self, screen):",
        "detail": "Selected.button",
        "documentation": {}
    },
    {
        "label": "\t\tself.x",
        "kind": 5,
        "importPath": "Selected.button",
        "description": "Selected.button",
        "peekOfCode": "\t\tself.x = pos[0]\n\t\tself.y = pos[1]\n\t\tself.font = font\n\t\tself.base, self.hover = base, hover\n\t\tself.input = input\n\t\tself.text = self.font.render(self.input, True, self.base)\n\t\tself.rect = self.text.get_rect(center=(self.x, self.y))\n\tdef update(self, screen):\n\t\tscreen.blit(self.text, self.rect)\n\tdef checkForInput(self, position):",
        "detail": "Selected.button",
        "documentation": {}
    },
    {
        "label": "\t\tself.y",
        "kind": 5,
        "importPath": "Selected.button",
        "description": "Selected.button",
        "peekOfCode": "\t\tself.y = pos[1]\n\t\tself.font = font\n\t\tself.base, self.hover = base, hover\n\t\tself.input = input\n\t\tself.text = self.font.render(self.input, True, self.base)\n\t\tself.rect = self.text.get_rect(center=(self.x, self.y))\n\tdef update(self, screen):\n\t\tscreen.blit(self.text, self.rect)\n\tdef checkForInput(self, position):\n\t\tif position[0] in range(self.rect.left, self.rect.right) and position[1] in range(self.rect.top, self.rect.bottom):",
        "detail": "Selected.button",
        "documentation": {}
    },
    {
        "label": "\t\tself.font",
        "kind": 5,
        "importPath": "Selected.button",
        "description": "Selected.button",
        "peekOfCode": "\t\tself.font = font\n\t\tself.base, self.hover = base, hover\n\t\tself.input = input\n\t\tself.text = self.font.render(self.input, True, self.base)\n\t\tself.rect = self.text.get_rect(center=(self.x, self.y))\n\tdef update(self, screen):\n\t\tscreen.blit(self.text, self.rect)\n\tdef checkForInput(self, position):\n\t\tif position[0] in range(self.rect.left, self.rect.right) and position[1] in range(self.rect.top, self.rect.bottom):\n\t\t\treturn True",
        "detail": "Selected.button",
        "documentation": {}
    },
    {
        "label": "\t\tself.input",
        "kind": 5,
        "importPath": "Selected.button",
        "description": "Selected.button",
        "peekOfCode": "\t\tself.input = input\n\t\tself.text = self.font.render(self.input, True, self.base)\n\t\tself.rect = self.text.get_rect(center=(self.x, self.y))\n\tdef update(self, screen):\n\t\tscreen.blit(self.text, self.rect)\n\tdef checkForInput(self, position):\n\t\tif position[0] in range(self.rect.left, self.rect.right) and position[1] in range(self.rect.top, self.rect.bottom):\n\t\t\treturn True\n\t\treturn False\n\tdef changeColor(self, position):",
        "detail": "Selected.button",
        "documentation": {}
    },
    {
        "label": "\t\tself.text",
        "kind": 5,
        "importPath": "Selected.button",
        "description": "Selected.button",
        "peekOfCode": "\t\tself.text = self.font.render(self.input, True, self.base)\n\t\tself.rect = self.text.get_rect(center=(self.x, self.y))\n\tdef update(self, screen):\n\t\tscreen.blit(self.text, self.rect)\n\tdef checkForInput(self, position):\n\t\tif position[0] in range(self.rect.left, self.rect.right) and position[1] in range(self.rect.top, self.rect.bottom):\n\t\t\treturn True\n\t\treturn False\n\tdef changeColor(self, position):\n\t\tif position[0] in range(self.rect.left, self.rect.right) and position[1] in range(self.rect.top, self.rect.bottom):",
        "detail": "Selected.button",
        "documentation": {}
    },
    {
        "label": "\t\tself.rect",
        "kind": 5,
        "importPath": "Selected.button",
        "description": "Selected.button",
        "peekOfCode": "\t\tself.rect = self.text.get_rect(center=(self.x, self.y))\n\tdef update(self, screen):\n\t\tscreen.blit(self.text, self.rect)\n\tdef checkForInput(self, position):\n\t\tif position[0] in range(self.rect.left, self.rect.right) and position[1] in range(self.rect.top, self.rect.bottom):\n\t\t\treturn True\n\t\treturn False\n\tdef changeColor(self, position):\n\t\tif position[0] in range(self.rect.left, self.rect.right) and position[1] in range(self.rect.top, self.rect.bottom):\n\t\t\tself.text = self.font.render(self.input, True, self.hover)",
        "detail": "Selected.button",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.text",
        "kind": 5,
        "importPath": "Selected.button",
        "description": "Selected.button",
        "peekOfCode": "\t\t\tself.text = self.font.render(self.input, True, self.hover)\n\t\telse:\n\t\t\tself.text = self.font.render(self.input, True, self.base)",
        "detail": "Selected.button",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.text",
        "kind": 5,
        "importPath": "Selected.button",
        "description": "Selected.button",
        "peekOfCode": "\t\t\tself.text = self.font.render(self.input, True, self.base)",
        "detail": "Selected.button",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "class Node:\n    def __init__(self, row, col, width):\n        self.row = row\n        self.col = col\n        self.x = int(row * width)\n        self.y = int(col * width)\n        self.colour = (255, 255, 255)\n        self.piece = None\n    def draw(self, SCREEN):\n        pygame.draw.rect(",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "Piece",
        "kind": 6,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "class Piece:\n    def __init__(self, team):\n        self.team = team\n        self.image = RED if self.team == \"R\" else BLACK\n        self.type = None\n    def draw(self, x, y):\n        SCREEN.blit(self.image, (x, y))\ndef getNode(grid, rows, width):\n    gap = width // rows\n    RowX, RowY = pygame.mouse.get_pos()",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "update_display",
        "kind": 2,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "def update_display(SCREEN, grid, rows, width):\n    for row in grid:\n        for spot in row:\n            spot.draw(SCREEN)\n    draw_grid(SCREEN, rows, width)\n    pygame.display.update()\ndef make_grid(rows, width):\n    grid = []\n    gap = width // rows\n    count = 0",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "make_grid",
        "kind": 2,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "def make_grid(rows, width):\n    grid = []\n    gap = width // rows\n    count = 0\n    for i in range(rows):\n        grid.append([])\n        for j in range(rows):\n            node = Node(j, i, gap)\n            if abs(i - j) % 2 == 0:\n                node.colour = (100, 100, 100)",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "draw_grid",
        "kind": 2,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "def draw_grid(SCREEN, rows, width):\n    # SCREEN.blit(surface, (0, 0))\n    gap = width // ROWS\n    for i in range(rows):\n        pygame.draw.line(SCREEN, (100, 100, 100), (0, i * gap), (width, i * gap))\n        for j in range(rows):\n            pygame.draw.line(SCREEN, (100, 100, 100), (j * gap, 0), (j * gap, width))\n# def draw_pause():\n#     pygame.draw.rect(surface, (128,128,128,150), [0,0,WIDTH,WIDTH])\n#     SCREEN.blit(surface, (0,0))",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "getNode",
        "kind": 2,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "def getNode(grid, rows, width):\n    gap = width // rows\n    RowX, RowY = pygame.mouse.get_pos()\n    Row = RowX // gap\n    Col = RowY // gap\n    return (Col, Row)\ndef resetColours(grid, node):\n    positions = generatePotentialMoves(node, grid)\n    positions.append(node)\n    for colouredNodes in positions:",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "resetColours",
        "kind": 2,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "def resetColours(grid, node):\n    positions = generatePotentialMoves(node, grid)\n    positions.append(node)\n    for colouredNodes in positions:\n        nodeX, nodeY = colouredNodes\n        grid[nodeX][nodeY].colour = (\n            (100, 100, 100) if abs(nodeX - nodeY) % 2 == 0 else (255, 255, 255)\n        )\ndef HighlightpotentialMoves(piecePosition, grid):\n    positions = generatePotentialMoves(piecePosition, grid)",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "HighlightpotentialMoves",
        "kind": 2,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "def HighlightpotentialMoves(piecePosition, grid):\n    positions = generatePotentialMoves(piecePosition, grid)\n    for position in positions:\n        Column, Row = position\n        grid[Column][Row].colour = (0, 200, 0)\ndef opposite(team):\n    return \"R\" if team == \"B\" else \"B\"\ndef generatePotentialMoves(nodePosition, grid):\n    checker = lambda x, y: x + y >= 0 and x + y < 8\n    positions = []",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "opposite",
        "kind": 2,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "def opposite(team):\n    return \"R\" if team == \"B\" else \"B\"\ndef generatePotentialMoves(nodePosition, grid):\n    checker = lambda x, y: x + y >= 0 and x + y < 8\n    positions = []\n    column, row = nodePosition\n    if grid[column][row].piece:\n        vectors = (\n            [[1, -1], [1, 1]]\n            if grid[column][row].piece.team == \"R\"",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "generatePotentialMoves",
        "kind": 2,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "def generatePotentialMoves(nodePosition, grid):\n    checker = lambda x, y: x + y >= 0 and x + y < 8\n    positions = []\n    column, row = nodePosition\n    if grid[column][row].piece:\n        vectors = (\n            [[1, -1], [1, 1]]\n            if grid[column][row].piece.team == \"R\"\n            else [[-1, -1], [-1, 1]]\n        )",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "highlight",
        "kind": 2,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "def highlight(ClickedNode, Grid, OldHighlight):\n    Column, Row = ClickedNode\n    Grid[Column][Row].colour = (200, 0, 0)\n    if OldHighlight:\n        resetColours(Grid, OldHighlight)\n    HighlightpotentialMoves(ClickedNode, Grid)\n    return (Column, Row)\n# MODEL\ndef move(grid, piecePosition, newPosition, TOTALBLACK, TOTALRED):\n    resetColours(grid, piecePosition)",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "def move(grid, piecePosition, newPosition, TOTALBLACK, TOTALRED):\n    resetColours(grid, piecePosition)\n    newColumn, newRow = newPosition\n    oldColumn, oldRow = piecePosition\n    piece = grid[oldColumn][oldRow].piece\n    grid[newColumn][newRow].piece = piece\n    grid[oldColumn][oldRow].piece = None\n    if newColumn == 7 and grid[newColumn][newRow].piece.team == \"R\":\n        grid[newColumn][newRow].piece.type = \"KING\"\n        grid[newColumn][newRow].piece.image = REDKING",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "checkers",
        "kind": 2,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "def checkers(WIDTH, ROWS, TOTALBLACK, TOTALRED):\n    while True:\n        grid = make_grid(ROWS, WIDTH)\n        highlightedPiece = None\n        currMove = \"B\"\n        while True:\n            if TOTALBLACK == 0:\n                return \"Player 1\"\n            if TOTALRED == 0:\n                return \"Player 2\"",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "kind": 5,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "WIDTH = 800\nROWS = 8\n# import piece images\nRED = pygame.image.load(\"assets/red.png\")\nBLACK = pygame.image.load(\"assets/black.png\")\nREDKING = pygame.image.load(\"assets/redKing.png\")\nBLACKKING = pygame.image.load(\"assets/blackKing.png\")\nTOTALBLACK = 12\nTOTALRED = 12\npygame.init()",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "ROWS",
        "kind": 5,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "ROWS = 8\n# import piece images\nRED = pygame.image.load(\"assets/red.png\")\nBLACK = pygame.image.load(\"assets/black.png\")\nREDKING = pygame.image.load(\"assets/redKing.png\")\nBLACKKING = pygame.image.load(\"assets/blackKing.png\")\nTOTALBLACK = 12\nTOTALRED = 12\npygame.init()\nSCREEN = pygame.display.set_mode((800, 800))",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "RED = pygame.image.load(\"assets/red.png\")\nBLACK = pygame.image.load(\"assets/black.png\")\nREDKING = pygame.image.load(\"assets/redKing.png\")\nBLACKKING = pygame.image.load(\"assets/blackKing.png\")\nTOTALBLACK = 12\nTOTALRED = 12\npygame.init()\nSCREEN = pygame.display.set_mode((800, 800))\n# VIEW\nclass Node:",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "BLACK = pygame.image.load(\"assets/black.png\")\nREDKING = pygame.image.load(\"assets/redKing.png\")\nBLACKKING = pygame.image.load(\"assets/blackKing.png\")\nTOTALBLACK = 12\nTOTALRED = 12\npygame.init()\nSCREEN = pygame.display.set_mode((800, 800))\n# VIEW\nclass Node:\n    def __init__(self, row, col, width):",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "REDKING",
        "kind": 5,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "REDKING = pygame.image.load(\"assets/redKing.png\")\nBLACKKING = pygame.image.load(\"assets/blackKing.png\")\nTOTALBLACK = 12\nTOTALRED = 12\npygame.init()\nSCREEN = pygame.display.set_mode((800, 800))\n# VIEW\nclass Node:\n    def __init__(self, row, col, width):\n        self.row = row",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "BLACKKING",
        "kind": 5,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "BLACKKING = pygame.image.load(\"assets/blackKing.png\")\nTOTALBLACK = 12\nTOTALRED = 12\npygame.init()\nSCREEN = pygame.display.set_mode((800, 800))\n# VIEW\nclass Node:\n    def __init__(self, row, col, width):\n        self.row = row\n        self.col = col",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "TOTALBLACK",
        "kind": 5,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "TOTALBLACK = 12\nTOTALRED = 12\npygame.init()\nSCREEN = pygame.display.set_mode((800, 800))\n# VIEW\nclass Node:\n    def __init__(self, row, col, width):\n        self.row = row\n        self.col = col\n        self.x = int(row * width)",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "TOTALRED",
        "kind": 5,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "TOTALRED = 12\npygame.init()\nSCREEN = pygame.display.set_mode((800, 800))\n# VIEW\nclass Node:\n    def __init__(self, row, col, width):\n        self.row = row\n        self.col = col\n        self.x = int(row * width)\n        self.y = int(col * width)",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "SCREEN",
        "kind": 5,
        "importPath": "Selected.checkers",
        "description": "Selected.checkers",
        "peekOfCode": "SCREEN = pygame.display.set_mode((800, 800))\n# VIEW\nclass Node:\n    def __init__(self, row, col, width):\n        self.row = row\n        self.col = col\n        self.x = int(row * width)\n        self.y = int(col * width)\n        self.colour = (255, 255, 255)\n        self.piece = None",
        "detail": "Selected.checkers",
        "documentation": {}
    },
    {
        "label": "create_board",
        "kind": 2,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "def create_board():\n    board = np.zeros((6, 7))\n    return board\ndef drop_piece(board, row, col, piece):\n    board[row][col] = piece\ndef is_valid_location(board, col):\n    return board[ROW_COUNT - 1][col] == 0\ndef get_next_open_row(board, col):\n    for i in range(ROW_COUNT):\n        if board[i][col] == 0:",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "drop_piece",
        "kind": 2,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "def drop_piece(board, row, col, piece):\n    board[row][col] = piece\ndef is_valid_location(board, col):\n    return board[ROW_COUNT - 1][col] == 0\ndef get_next_open_row(board, col):\n    for i in range(ROW_COUNT):\n        if board[i][col] == 0:\n            return i\ndef winning_move(board, piece):\n    # horizontal",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "is_valid_location",
        "kind": 2,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "def is_valid_location(board, col):\n    return board[ROW_COUNT - 1][col] == 0\ndef get_next_open_row(board, col):\n    for i in range(ROW_COUNT):\n        if board[i][col] == 0:\n            return i\ndef winning_move(board, piece):\n    # horizontal\n    for c in range(COLUMN_COUNT - 3):\n        for r in range(ROW_COUNT):",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "get_next_open_row",
        "kind": 2,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "def get_next_open_row(board, col):\n    for i in range(ROW_COUNT):\n        if board[i][col] == 0:\n            return i\ndef winning_move(board, piece):\n    # horizontal\n    for c in range(COLUMN_COUNT - 3):\n        for r in range(ROW_COUNT):\n            if (\n                board[r][c] == piece",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "winning_move",
        "kind": 2,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "def winning_move(board, piece):\n    # horizontal\n    for c in range(COLUMN_COUNT - 3):\n        for r in range(ROW_COUNT):\n            if (\n                board[r][c] == piece\n                and board[r][c + 1] == piece\n                and board[r][c + 2] == piece\n                and board[r][c + 3] == piece\n            ):",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "draw_board",
        "kind": 2,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "def draw_board(board):\n    for c in range(COLUMN_COUNT):\n        for r in range(ROW_COUNT):\n            pygame.draw.rect(\n                SCREEN,\n                BLUE,\n                (c * SQUARESIZE, r * SQUARESIZE + SQUARESIZE, SQUARESIZE, SQUARESIZE),\n            )\n            pygame.draw.circle(\n                SCREEN,",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "print_board",
        "kind": 2,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "def print_board(board):\n    print(np.flip(board, 0))\n    print(\"\\n\")\ndef connect_4():\n    board = create_board()\n    print(board)\n    game_over = False\n    turn = 0\n    pygame.init()\n    draw_board(board)",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "connect_4",
        "kind": 2,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "def connect_4():\n    board = create_board()\n    print(board)\n    game_over = False\n    turn = 0\n    pygame.init()\n    draw_board(board)\n    pygame.display.update()\n    myfont = pygame.font.SysFont(\"monospace\", 75)\n    while not game_over:",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "BLUE = (0, 0, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nYELLOW = (255, 255, 0)\nSQUARESIZE = 100\nROW_COUNT = 6\nCOLUMN_COUNT = 7\nEVEN = 0\nODD = 1\nSIZE = 800",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "BLACK = (0, 0, 0)\nRED = (255, 0, 0)\nYELLOW = (255, 255, 0)\nSQUARESIZE = 100\nROW_COUNT = 6\nCOLUMN_COUNT = 7\nEVEN = 0\nODD = 1\nSIZE = 800\nSQUARESIZE = SIZE / COLUMN_COUNT",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "RED = (255, 0, 0)\nYELLOW = (255, 255, 0)\nSQUARESIZE = 100\nROW_COUNT = 6\nCOLUMN_COUNT = 7\nEVEN = 0\nODD = 1\nSIZE = 800\nSQUARESIZE = SIZE / COLUMN_COUNT\nRADIUS = int(SQUARESIZE / 2 - 5)",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "YELLOW = (255, 255, 0)\nSQUARESIZE = 100\nROW_COUNT = 6\nCOLUMN_COUNT = 7\nEVEN = 0\nODD = 1\nSIZE = 800\nSQUARESIZE = SIZE / COLUMN_COUNT\nRADIUS = int(SQUARESIZE / 2 - 5)\n# VIEW",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "SQUARESIZE",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "SQUARESIZE = 100\nROW_COUNT = 6\nCOLUMN_COUNT = 7\nEVEN = 0\nODD = 1\nSIZE = 800\nSQUARESIZE = SIZE / COLUMN_COUNT\nRADIUS = int(SQUARESIZE / 2 - 5)\n# VIEW\nSCREEN = pygame.display.set_mode((800, 800))",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "ROW_COUNT",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "ROW_COUNT = 6\nCOLUMN_COUNT = 7\nEVEN = 0\nODD = 1\nSIZE = 800\nSQUARESIZE = SIZE / COLUMN_COUNT\nRADIUS = int(SQUARESIZE / 2 - 5)\n# VIEW\nSCREEN = pygame.display.set_mode((800, 800))\ndef create_board():",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "COLUMN_COUNT",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "COLUMN_COUNT = 7\nEVEN = 0\nODD = 1\nSIZE = 800\nSQUARESIZE = SIZE / COLUMN_COUNT\nRADIUS = int(SQUARESIZE / 2 - 5)\n# VIEW\nSCREEN = pygame.display.set_mode((800, 800))\ndef create_board():\n    board = np.zeros((6, 7))",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "EVEN",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "EVEN = 0\nODD = 1\nSIZE = 800\nSQUARESIZE = SIZE / COLUMN_COUNT\nRADIUS = int(SQUARESIZE / 2 - 5)\n# VIEW\nSCREEN = pygame.display.set_mode((800, 800))\ndef create_board():\n    board = np.zeros((6, 7))\n    return board",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "ODD",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "ODD = 1\nSIZE = 800\nSQUARESIZE = SIZE / COLUMN_COUNT\nRADIUS = int(SQUARESIZE / 2 - 5)\n# VIEW\nSCREEN = pygame.display.set_mode((800, 800))\ndef create_board():\n    board = np.zeros((6, 7))\n    return board\ndef drop_piece(board, row, col, piece):",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "SIZE",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "SIZE = 800\nSQUARESIZE = SIZE / COLUMN_COUNT\nRADIUS = int(SQUARESIZE / 2 - 5)\n# VIEW\nSCREEN = pygame.display.set_mode((800, 800))\ndef create_board():\n    board = np.zeros((6, 7))\n    return board\ndef drop_piece(board, row, col, piece):\n    board[row][col] = piece",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "SQUARESIZE",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "SQUARESIZE = SIZE / COLUMN_COUNT\nRADIUS = int(SQUARESIZE / 2 - 5)\n# VIEW\nSCREEN = pygame.display.set_mode((800, 800))\ndef create_board():\n    board = np.zeros((6, 7))\n    return board\ndef drop_piece(board, row, col, piece):\n    board[row][col] = piece\ndef is_valid_location(board, col):",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "RADIUS",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "RADIUS = int(SQUARESIZE / 2 - 5)\n# VIEW\nSCREEN = pygame.display.set_mode((800, 800))\ndef create_board():\n    board = np.zeros((6, 7))\n    return board\ndef drop_piece(board, row, col, piece):\n    board[row][col] = piece\ndef is_valid_location(board, col):\n    return board[ROW_COUNT - 1][col] == 0",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "SCREEN",
        "kind": 5,
        "importPath": "Selected.connect_four",
        "description": "Selected.connect_four",
        "peekOfCode": "SCREEN = pygame.display.set_mode((800, 800))\ndef create_board():\n    board = np.zeros((6, 7))\n    return board\ndef drop_piece(board, row, col, piece):\n    board[row][col] = piece\ndef is_valid_location(board, col):\n    return board[ROW_COUNT - 1][col] == 0\ndef get_next_open_row(board, col):\n    for i in range(ROW_COUNT):",
        "detail": "Selected.connect_four",
        "documentation": {}
    },
    {
        "label": "win",
        "kind": 2,
        "importPath": "Selected.menu",
        "description": "Selected.menu",
        "peekOfCode": "def win(winner, game):\n    if game == 'Checkers':\n        if winner == 'Player_1':\n            CHECKERS_WINS[0] += 1\n        elif winner == 'Player_2':\n            CHECKERS_WINS[1] += 1\n    elif game == 'Connect 4':\n        if winner == 'Player_1':\n            CONNECT_4_WINS[0] += 1\n        elif winner == 'Player_2':",
        "detail": "Selected.menu",
        "documentation": {}
    },
    {
        "label": "play_checkers",
        "kind": 2,
        "importPath": "Selected.menu",
        "description": "Selected.menu",
        "peekOfCode": "def play_checkers():\n    pygame.display.set_caption(\"Checkers\")\n    SCREEN.fill(\"black\")\n    win(checkers(800, 8, 12, 12), 'Checkers')\ndef play_connect_4():\n    pygame.display.set_caption(\"Connect 4\")\n    SCREEN.fill(\"black\")\n    win(connect_4(), 'Connect 4')\ndef play_tic_tac_toe():\n    pygame.display.set_caption(\"Tic-Tac-Toe\")",
        "detail": "Selected.menu",
        "documentation": {}
    },
    {
        "label": "play_connect_4",
        "kind": 2,
        "importPath": "Selected.menu",
        "description": "Selected.menu",
        "peekOfCode": "def play_connect_4():\n    pygame.display.set_caption(\"Connect 4\")\n    SCREEN.fill(\"black\")\n    win(connect_4(), 'Connect 4')\ndef play_tic_tac_toe():\n    pygame.display.set_caption(\"Tic-Tac-Toe\")\n    SCREEN.fill(\"black\")\n    win(tic_tac_toe(800, 3), 'Tic-Tac-Toe')\ndef main_menu():\n    while True:",
        "detail": "Selected.menu",
        "documentation": {}
    },
    {
        "label": "play_tic_tac_toe",
        "kind": 2,
        "importPath": "Selected.menu",
        "description": "Selected.menu",
        "peekOfCode": "def play_tic_tac_toe():\n    pygame.display.set_caption(\"Tic-Tac-Toe\")\n    SCREEN.fill(\"black\")\n    win(tic_tac_toe(800, 3), 'Tic-Tac-Toe')\ndef main_menu():\n    while True:\n        # VIEW\n        SCREEN.blit(BG, (0, 0))\n        MENU_MOUSE_POS = pygame.mouse.get_pos()\n        MENU_TEXT = pygame.font.Font(\"assets/font.ttf\", 60).render(\"MAIN MENU\", True, \"Grey\")",
        "detail": "Selected.menu",
        "documentation": {}
    },
    {
        "label": "main_menu",
        "kind": 2,
        "importPath": "Selected.menu",
        "description": "Selected.menu",
        "peekOfCode": "def main_menu():\n    while True:\n        # VIEW\n        SCREEN.blit(BG, (0, 0))\n        MENU_MOUSE_POS = pygame.mouse.get_pos()\n        MENU_TEXT = pygame.font.Font(\"assets/font.ttf\", 60).render(\"MAIN MENU\", True, \"Grey\")\n        MENU_RECT = MENU_TEXT.get_rect(center=(400, 100))\n        CHECKERS_BUTTON = Button(pos=(400, 250),\n                            input=\"CHECKERS\", font=pygame.font.Font(\"assets/font.ttf\", 40), base=\"White\", hover=\"Green\")\n        CONNECT_4_BUTTON = Button(pos=(400, 325),",
        "detail": "Selected.menu",
        "documentation": {}
    },
    {
        "label": "SCREEN",
        "kind": 5,
        "importPath": "Selected.menu",
        "description": "Selected.menu",
        "peekOfCode": "SCREEN = pygame.display.set_mode((800, 800))\npygame.display.set_caption(\"Menu\")\nBG = pygame.image.load(\"assets/Background.png\")\n# MODEL\nCHECKERS_WINS = [0, 0]\nCONNECT_4_WINS = [0, 0]\nTIC_TAC_TOE_WINS = [0, 0]\ndef win(winner, game):\n    if game == 'Checkers':\n        if winner == 'Player_1':",
        "detail": "Selected.menu",
        "documentation": {}
    },
    {
        "label": "BG",
        "kind": 5,
        "importPath": "Selected.menu",
        "description": "Selected.menu",
        "peekOfCode": "BG = pygame.image.load(\"assets/Background.png\")\n# MODEL\nCHECKERS_WINS = [0, 0]\nCONNECT_4_WINS = [0, 0]\nTIC_TAC_TOE_WINS = [0, 0]\ndef win(winner, game):\n    if game == 'Checkers':\n        if winner == 'Player_1':\n            CHECKERS_WINS[0] += 1\n        elif winner == 'Player_2':",
        "detail": "Selected.menu",
        "documentation": {}
    },
    {
        "label": "CHECKERS_WINS",
        "kind": 5,
        "importPath": "Selected.menu",
        "description": "Selected.menu",
        "peekOfCode": "CHECKERS_WINS = [0, 0]\nCONNECT_4_WINS = [0, 0]\nTIC_TAC_TOE_WINS = [0, 0]\ndef win(winner, game):\n    if game == 'Checkers':\n        if winner == 'Player_1':\n            CHECKERS_WINS[0] += 1\n        elif winner == 'Player_2':\n            CHECKERS_WINS[1] += 1\n    elif game == 'Connect 4':",
        "detail": "Selected.menu",
        "documentation": {}
    },
    {
        "label": "CONNECT_4_WINS",
        "kind": 5,
        "importPath": "Selected.menu",
        "description": "Selected.menu",
        "peekOfCode": "CONNECT_4_WINS = [0, 0]\nTIC_TAC_TOE_WINS = [0, 0]\ndef win(winner, game):\n    if game == 'Checkers':\n        if winner == 'Player_1':\n            CHECKERS_WINS[0] += 1\n        elif winner == 'Player_2':\n            CHECKERS_WINS[1] += 1\n    elif game == 'Connect 4':\n        if winner == 'Player_1':",
        "detail": "Selected.menu",
        "documentation": {}
    },
    {
        "label": "TIC_TAC_TOE_WINS",
        "kind": 5,
        "importPath": "Selected.menu",
        "description": "Selected.menu",
        "peekOfCode": "TIC_TAC_TOE_WINS = [0, 0]\ndef win(winner, game):\n    if game == 'Checkers':\n        if winner == 'Player_1':\n            CHECKERS_WINS[0] += 1\n        elif winner == 'Player_2':\n            CHECKERS_WINS[1] += 1\n    elif game == 'Connect 4':\n        if winner == 'Player_1':\n            CONNECT_4_WINS[0] += 1",
        "detail": "Selected.menu",
        "documentation": {}
    },
    {
        "label": "player_stats",
        "kind": 2,
        "importPath": "Selected.player_stats",
        "description": "Selected.player_stats",
        "peekOfCode": "def player_stats(CHECKERS_WINS, CONNECT_4_WINS, TIC_TAC_TOE_WINS):\n    while True:\n        MOUSE_POS = pygame.mouse.get_pos()\n        SCREEN.fill(\"black\")\n        TITLE = pygame.font.Font(\"assets/font.ttf\", 30).render(\n            \"PLAYER STATISTICS\", True, \"White\"\n        )\n        TRECT = TITLE.get_rect(center=(400, 75))\n        SCREEN.blit(TITLE, TRECT)\n        P1_LABEL = pygame.font.Font(\"assets/font.ttf\", 25).render(",
        "detail": "Selected.player_stats",
        "documentation": {}
    },
    {
        "label": "SCREEN",
        "kind": 5,
        "importPath": "Selected.player_stats",
        "description": "Selected.player_stats",
        "peekOfCode": "SCREEN = pygame.display.set_mode((800, 800))\npygame.display.set_caption(\"Player Statistics\")\ndef player_stats(CHECKERS_WINS, CONNECT_4_WINS, TIC_TAC_TOE_WINS):\n    while True:\n        MOUSE_POS = pygame.mouse.get_pos()\n        SCREEN.fill(\"black\")\n        TITLE = pygame.font.Font(\"assets/font.ttf\", 30).render(\n            \"PLAYER STATISTICS\", True, \"White\"\n        )\n        TRECT = TITLE.get_rect(center=(400, 75))",
        "detail": "Selected.player_stats",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "Selected.settings",
        "description": "Selected.settings",
        "peekOfCode": "def settings(current_game, PLAYER_STATS):\n    while True:\n        SCREEN.blit(BG, (0, 0))\n        SETTINGS_MOUSE_POS = pygame.mouse.get_pos()\n        SETTINGS_TEXT = pygame.font.Font(\"assets/font.ttf\", 50).render(\"SETTINGS\", True, \"Grey\")\n        SETTINGS_RECT = SETTINGS_TEXT.get_rect(center=(400, 100))\n        PLAYER_STATS_BUTTON = Button(pos=(400, 250), \n                            input=\"Player Stats: \" + PLAYER_STATS, font=pygame.font.Font(\"assets/font.ttf\", 25), base=\"White\", hover=\"Green\")\n        RETURN_BUTTON = Button(pos=(400, 600), \n                            input=\"RETURN TO GAME\", font=pygame.font.Font(\"assets/font.ttf\", 25), base=\"White\", hover=\"Green\")",
        "detail": "Selected.settings",
        "documentation": {}
    },
    {
        "label": "SCREEN",
        "kind": 5,
        "importPath": "Selected.settings",
        "description": "Selected.settings",
        "peekOfCode": "SCREEN = pygame.display.set_mode((800, 800))\npygame.display.set_caption(\"Menu\")\nBG = pygame.image.load(\"assets/Background.png\")\nPLAYER_STATS = 'Enabled'\ndef settings(current_game, PLAYER_STATS):\n    while True:\n        SCREEN.blit(BG, (0, 0))\n        SETTINGS_MOUSE_POS = pygame.mouse.get_pos()\n        SETTINGS_TEXT = pygame.font.Font(\"assets/font.ttf\", 50).render(\"SETTINGS\", True, \"Grey\")\n        SETTINGS_RECT = SETTINGS_TEXT.get_rect(center=(400, 100))",
        "detail": "Selected.settings",
        "documentation": {}
    },
    {
        "label": "BG",
        "kind": 5,
        "importPath": "Selected.settings",
        "description": "Selected.settings",
        "peekOfCode": "BG = pygame.image.load(\"assets/Background.png\")\nPLAYER_STATS = 'Enabled'\ndef settings(current_game, PLAYER_STATS):\n    while True:\n        SCREEN.blit(BG, (0, 0))\n        SETTINGS_MOUSE_POS = pygame.mouse.get_pos()\n        SETTINGS_TEXT = pygame.font.Font(\"assets/font.ttf\", 50).render(\"SETTINGS\", True, \"Grey\")\n        SETTINGS_RECT = SETTINGS_TEXT.get_rect(center=(400, 100))\n        PLAYER_STATS_BUTTON = Button(pos=(400, 250), \n                            input=\"Player Stats: \" + PLAYER_STATS, font=pygame.font.Font(\"assets/font.ttf\", 25), base=\"White\", hover=\"Green\")",
        "detail": "Selected.settings",
        "documentation": {}
    },
    {
        "label": "PLAYER_STATS",
        "kind": 5,
        "importPath": "Selected.settings",
        "description": "Selected.settings",
        "peekOfCode": "PLAYER_STATS = 'Enabled'\ndef settings(current_game, PLAYER_STATS):\n    while True:\n        SCREEN.blit(BG, (0, 0))\n        SETTINGS_MOUSE_POS = pygame.mouse.get_pos()\n        SETTINGS_TEXT = pygame.font.Font(\"assets/font.ttf\", 50).render(\"SETTINGS\", True, \"Grey\")\n        SETTINGS_RECT = SETTINGS_TEXT.get_rect(center=(400, 100))\n        PLAYER_STATS_BUTTON = Button(pos=(400, 250), \n                            input=\"Player Stats: \" + PLAYER_STATS, font=pygame.font.Font(\"assets/font.ttf\", 25), base=\"White\", hover=\"Green\")\n        RETURN_BUTTON = Button(pos=(400, 600), ",
        "detail": "Selected.settings",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "class Node:\n    def __init__(self, row, col, width):\n        self.row = row\n        self.col = col\n        self.x = int(row * width)\n        self.y = int(col * width)\n        self.color = BG_COLOR  # Initially same as background\n        self.piece = None\n    def draw(self, WIN):\n        pygame.draw.rect(WIN, self.color, (self.x, self.y, WIDTH / ROWS, WIDTH / ROWS))",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "Piece",
        "kind": 6,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "class Piece:\n    def __init__(self, image):\n        self.image = image\ndef make_move(grid, row, col, player):\n    if grid[row][col].piece is None:\n        if player == \"X\":\n            grid[row][col].piece = Piece(X_IMAGE)\n        else:\n            grid[row][col].piece = Piece(O_IMAGE)\n        return True",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "update_display",
        "kind": 2,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "def update_display(win, grid, rows, width):\n    win.fill(BG_COLOR)  # Clear the screen with background color\n    for row in grid:\n        for spot in row:\n            spot.draw(win)\n    draw_grid(win, rows, width)\n    pygame.display.update()\ndef make_grid(rows, width):\n    grid = []\n    gap = width // rows",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "make_grid",
        "kind": 2,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "def make_grid(rows, width):\n    grid = []\n    gap = width // rows\n    for i in range(rows):\n        grid.append([])\n        for j in range(rows):\n            node = Node(j, i, gap)\n            grid[i].append(node)\n    return grid\ndef draw_grid(win, rows, width):",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "draw_grid",
        "kind": 2,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "def draw_grid(win, rows, width):\n    gap = width // ROWS\n    for i in range(rows):\n        pygame.draw.line(\n            win, LINE_COLOR, (0, i * gap), (width, i * gap), width=4\n        )  # Thicker lines\n        for j in range(rows):\n            pygame.draw.line(win, LINE_COLOR, (j * gap, 0), (j * gap, width), width=4)\nclass Piece:\n    def __init__(self, image):",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "make_move",
        "kind": 2,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "def make_move(grid, row, col, player):\n    if grid[row][col].piece is None:\n        if player == \"X\":\n            grid[row][col].piece = Piece(X_IMAGE)\n        else:\n            grid[row][col].piece = Piece(O_IMAGE)\n        return True\n    return False\n# MODEL\ndef check_winner(grid, player):",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "check_winner",
        "kind": 2,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "def check_winner(grid, player):\n    for i in range(ROWS):\n        if all(\n            [\n                grid[i][j].piece is not None and grid[i][j].piece.image == player\n                for j in range(ROWS)\n            ]\n        ):\n            return True\n        if all(",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "check_draw",
        "kind": 2,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "def check_draw(grid):\n    if all([grid[i][j].piece is not None for i in range(ROWS) for j in range(ROWS)]):\n        return True\n    return False\ndef tic_tac_toe(WIDTH, ROWS):\n    grid = make_grid(ROWS, WIDTH)\n    currMove = \"X\"\n    while True:\n        if check_winner(grid, X_IMAGE):\n            return \"Player_1\"",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "tic_tac_toe",
        "kind": 2,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "def tic_tac_toe(WIDTH, ROWS):\n    grid = make_grid(ROWS, WIDTH)\n    currMove = \"X\"\n    while True:\n        if check_winner(grid, X_IMAGE):\n            return \"Player_1\"\n        elif check_winner(grid, O_IMAGE):\n            return \"Player_2\"\n        elif check_draw(grid):\n            return \"Draw\"",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "kind": 5,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "WIDTH = 800\nROWS = 3\nX_IMAGE = pygame.image.load(\"assets/x.png\")\nO_IMAGE = pygame.image.load(\"assets/o.png\")\n# resize images\nX_IMAGE = pygame.transform.scale(X_IMAGE, (WIDTH // ROWS, WIDTH // ROWS))\nO_IMAGE = pygame.transform.scale(O_IMAGE, (WIDTH // ROWS, WIDTH // ROWS))\n# Colors\nLINE_COLOR = (128, 128, 128)  # Light gray for grid lines\nBG_COLOR = (0, 0, 0)  # Black background",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "ROWS",
        "kind": 5,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "ROWS = 3\nX_IMAGE = pygame.image.load(\"assets/x.png\")\nO_IMAGE = pygame.image.load(\"assets/o.png\")\n# resize images\nX_IMAGE = pygame.transform.scale(X_IMAGE, (WIDTH // ROWS, WIDTH // ROWS))\nO_IMAGE = pygame.transform.scale(O_IMAGE, (WIDTH // ROWS, WIDTH // ROWS))\n# Colors\nLINE_COLOR = (128, 128, 128)  # Light gray for grid lines\nBG_COLOR = (0, 0, 0)  # Black background\n# MODEL",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "X_IMAGE",
        "kind": 5,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "X_IMAGE = pygame.image.load(\"assets/x.png\")\nO_IMAGE = pygame.image.load(\"assets/o.png\")\n# resize images\nX_IMAGE = pygame.transform.scale(X_IMAGE, (WIDTH // ROWS, WIDTH // ROWS))\nO_IMAGE = pygame.transform.scale(O_IMAGE, (WIDTH // ROWS, WIDTH // ROWS))\n# Colors\nLINE_COLOR = (128, 128, 128)  # Light gray for grid lines\nBG_COLOR = (0, 0, 0)  # Black background\n# MODEL\npygame.init()",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "O_IMAGE",
        "kind": 5,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "O_IMAGE = pygame.image.load(\"assets/o.png\")\n# resize images\nX_IMAGE = pygame.transform.scale(X_IMAGE, (WIDTH // ROWS, WIDTH // ROWS))\nO_IMAGE = pygame.transform.scale(O_IMAGE, (WIDTH // ROWS, WIDTH // ROWS))\n# Colors\nLINE_COLOR = (128, 128, 128)  # Light gray for grid lines\nBG_COLOR = (0, 0, 0)  # Black background\n# MODEL\npygame.init()\nWIN = pygame.display.set_mode((WIDTH, WIDTH))",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "X_IMAGE",
        "kind": 5,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "X_IMAGE = pygame.transform.scale(X_IMAGE, (WIDTH // ROWS, WIDTH // ROWS))\nO_IMAGE = pygame.transform.scale(O_IMAGE, (WIDTH // ROWS, WIDTH // ROWS))\n# Colors\nLINE_COLOR = (128, 128, 128)  # Light gray for grid lines\nBG_COLOR = (0, 0, 0)  # Black background\n# MODEL\npygame.init()\nWIN = pygame.display.set_mode((WIDTH, WIDTH))\npygame.display.set_caption(\"Tic Tac Toe\")\npriorMoves = []",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "O_IMAGE",
        "kind": 5,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "O_IMAGE = pygame.transform.scale(O_IMAGE, (WIDTH // ROWS, WIDTH // ROWS))\n# Colors\nLINE_COLOR = (128, 128, 128)  # Light gray for grid lines\nBG_COLOR = (0, 0, 0)  # Black background\n# MODEL\npygame.init()\nWIN = pygame.display.set_mode((WIDTH, WIDTH))\npygame.display.set_caption(\"Tic Tac Toe\")\npriorMoves = []\n# VIEW",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "LINE_COLOR",
        "kind": 5,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "LINE_COLOR = (128, 128, 128)  # Light gray for grid lines\nBG_COLOR = (0, 0, 0)  # Black background\n# MODEL\npygame.init()\nWIN = pygame.display.set_mode((WIDTH, WIDTH))\npygame.display.set_caption(\"Tic Tac Toe\")\npriorMoves = []\n# VIEW\nclass Node:\n    def __init__(self, row, col, width):",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "BG_COLOR = (0, 0, 0)  # Black background\n# MODEL\npygame.init()\nWIN = pygame.display.set_mode((WIDTH, WIDTH))\npygame.display.set_caption(\"Tic Tac Toe\")\npriorMoves = []\n# VIEW\nclass Node:\n    def __init__(self, row, col, width):\n        self.row = row",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "WIN",
        "kind": 5,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "WIN = pygame.display.set_mode((WIDTH, WIDTH))\npygame.display.set_caption(\"Tic Tac Toe\")\npriorMoves = []\n# VIEW\nclass Node:\n    def __init__(self, row, col, width):\n        self.row = row\n        self.col = col\n        self.x = int(row * width)\n        self.y = int(col * width)",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    },
    {
        "label": "priorMoves",
        "kind": 5,
        "importPath": "Selected.tic_tac_toe",
        "description": "Selected.tic_tac_toe",
        "peekOfCode": "priorMoves = []\n# VIEW\nclass Node:\n    def __init__(self, row, col, width):\n        self.row = row\n        self.col = col\n        self.x = int(row * width)\n        self.y = int(col * width)\n        self.color = BG_COLOR  # Initially same as background\n        self.piece = None",
        "detail": "Selected.tic_tac_toe",
        "documentation": {}
    }
]